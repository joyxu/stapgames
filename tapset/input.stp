# systemtap input tapset
# Copyright (C) 2008 Masami Hiramatsu <masami.hiramatsu@gmail.com>
#
# This file is free software and is distributed under the terms of the GNU
# General Public License (GPL); either version 2, or (at your option) any
# later version.


probe game.input = kernel.function("input_event") {
  type = $type
  code = $code
  value = $value
}

#TODO: convert keycode to char.

# elemental gamepad keys ;-P
global GM_KBD_UP   =103
global GM_KBD_DOWN =108
global GM_KBD_RIGHT=106
global GM_KBD_LEFT =105
global GM_KBD_Z    =44
global GM_KBD_X    =45
global GM_KBD_C    =46
global GM_KBD_ESC  =1
global GM_KBD_SPACE=57


probe game.kbd = game.input {
  if (type != 1 || code >= 256) next;
  down = value
}

probe game.kbd.down = game.kbd {
  if (!down) next
}

probe game.kbd.up = game.kbd {
  if (down) next
}

# mouse

probe game.mouse = game.input {
  if (!(type == 2 || 
        (type == 1 && (code & 0xfe0) != 0x100) ) ) next #EV_KEY
}

probe game.mouse.rel = game.input {
  if(type != 2) next #EV_REL
  if(code == 0) dx = value
  else if(code == 1) dy = value
  else if(code == 8) dz = value
}

global GM_mouse_abs

probe game.mouse.abs = game.input {
  if(type != 3) next #EV_ABS
  if(code == 0) {
     GM_mouse_abs[0] = value
  } else if(code == 1) {
     GM_mouse_abs[1] = value
  }
  x = GM_mouse_abs[0]
  y = GM_mouse_abs[1]
}

global GM_mouse_btn

probe game.mouse.btn = game.input {
  if (type != 1 || (code & 0xfe0) != 0x100) next #EV_KEY
  button = code & 0xf
  down = value
  if (GM_mouse_btn[button] == down) next
  GM_mouse_btn[button] = down
}

global GM_mouse_pos

probe game.mouse.rel {
  GM_mouse_pos[0] += dx
  GM_mouse_pos[1] += dy
  GM_mouse_pos[2] += dz
}

/*
global GM_mouse_base, __GM_reset
# we don't use that because ABS touchpad is very unstable
probe game.mouse.abs {
  if (code == 0) { # x abs
    if ([0] in __GM_reset) {
      GM_mouse_base[0] = value - __GM_reset[0]
      delete __GM_reset[0]
    }
    GM_mouse_pos[0] = value - GM_mouse_base[0]
  } else
  if (code == 1) { # y abs
    if ([1] in __GM_reset) {
      GM_mouse_base[1] = value - __GM_reset[1]
      delete __GM_reset[1]
    }
    GM_mouse_pos[1] = value - GM_mouse_base[1]
  }
}
*/

function game_mouse_reset(x:long, y:long, z:long) {
  GM_mouse_pos[0] = x
  GM_mouse_pos[1] = y
  GM_mouse_pos[2] = z
//  __GM_reset[0] = x
//  __GM_reset[1] = y
}

function game_mouse_x:long() {
  return GM_mouse_pos[0]
}

function game_mouse_y:long() {
  return GM_mouse_pos[1]
}

function game_mouse_z:long() {
  return GM_mouse_pos[2]
}

